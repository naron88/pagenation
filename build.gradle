plugins {
    id 'java'
    id 'jacoco'
    id 'org.springframework.boot' version '3.4.4'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.practice'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

jacoco {
    toolVersion = "0.8.10" // 원하는 버전 사용 가능
}

jacocoTestReport {
    dependsOn test // 테스트가 먼저 실행되어야 리포트 생성 가능

    reports {
        xml.required = true
        html.required = true
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    // database
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'org.postgresql:postgresql'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // Lombok
    // @Getter, @Setter, @Builder 같은 어노테이션
    // 코드의 가독성을 높이고 반복 코드를 줄이기 위해 사용
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // Mapstruct
    // Entity와 DTO 간 변환을 컴파일 타임에 자동으로 생성
    implementation 'org.mapstruct:mapstruct:1.6.3'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.3'

    // Lombok, Mapstruct 연동
    // Lombok과 MapStruct을 함께 사용할 때 발생할 수 있는 충돌을 방지
    implementation 'org.projectlombok:lombok-mapstruct-binding:0.2.0'
    annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'

    // swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.4'
    testImplementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-api', version: '2.8.4'

    // QueryDSL
    // 타입 세이프한 방식으로 동적 쿼리를 작성하기 위해 사용
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
}


// QueryDSL 설정
def querydslDir = "$buildDir/generated/querydsl"

sourceSets {
    main.java.srcDirs += [querydslDir]
}

tasks.withType(JavaCompile).configureEach {

    options.getGeneratedSourceOutputDirectory().set(file(querydslDir))
    // 이 부분이 중요합니다 - 어노테이션 프로세서가 JPA 엔티티를 인식하도록 설정
    options.annotationProcessorPath = configurations.annotationProcessor
}
clean {
    delete file(querydslDir)
}
tasks.named('test') {
    useJUnitPlatform()
}
